{"version":3,"sources":["../src/remap.js"],"names":["remap","coverage","options","smc","Array","isArray","forEach","addCoverage","item","getFinalCoverage"],"mappings":";;;;;;;sBAyBwBA,K;;;;;;;;;;AAvBxB;;;;;;;;;;;;;;;;;;;;;;;AAuBe,aAASA,KAAT,CAAeC,QAAf,EAAuC;AAAA,UAAdC,OAAc,uEAAJ,EAAI;;AACrD,UAAMC,MAAM,kCAAwBD,OAAxB,CAAZ;;AAEA,UAAI,CAACE,MAAMC,OAAN,CAAcJ,QAAd,CAAL,EAA8B;AAC7BA,mBAAW,CAACA,QAAD,CAAX;AACA;;AAEDA,eAASK,OAAT,CAAiB,gBAAQ;AACxBH,YAAII,WAAJ,CAAgBC,IAAhB;AACA,OAFD;;AAIA,aAAOL,IAAIM,gBAAJ,EAAP;AACA","file":"remap.js","sourcesContent":["import CoverageTransformer from './CoverageTransformer';\r\n\r\n/**\r\n * Remaps coverage data based on the source maps it discovers in the\r\n * covered files and returns a coverage Collector that contains the remappped\r\n * data.\r\n * @param  {Array|Object} coverage The coverage (or array of coverages) that need to be\r\n *                                 remapped\r\n * @param  {Object} options A configuration object:\r\n *                              basePath?    - a string containing to utilise as the base path\r\n *                                             for determining the location of the source file\r\n *                              exclude?     - a string or Regular Expression that filters out\r\n *                                             any coverage where the file path matches\r\n *                              mapFileName? - a function that takes the remapped file name and\r\n *                                             and returns a string that should be the name in\r\n *                                             the final coverage\r\n *                              readFile?    - a function that can read a file\r\n *                                             syncronously\r\n *                              readJSON?    - a function that can read and parse a\r\n *                                             JSON file syncronously\r\n *                              sources?     - a Istanbul store where inline sources will be\r\n *                                             added\r\n *                              warn?        - a function that logs warnings\r\n * @return {istanbul/lib/_collector}           The remapped collector\r\n */\r\nexport default function remap(coverage, options = {}) {\r\n\tconst smc = new CoverageTransformer(options);\r\n\r\n\tif (!Array.isArray(coverage)) {\r\n\t\tcoverage = [coverage];\r\n\t}\r\n\r\n\tcoverage.forEach(item => {\r\n\t\tsmc.addCoverage(item);\r\n\t});\r\n\r\n\treturn smc.getFinalCoverage();\r\n}\r\n"]}