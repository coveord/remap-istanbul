{"version":3,"sources":["../src/checkThreshold.js"],"names":["checkThreshold","mixin","destination","i","arguments","length","source","key","overrideThresholds","overrides","thresholds","Object","keys","some","pattern","normalize","dot","removeFiles","covObj","patterns","obj","forEach","found","checkOpt","collector","defaultThresholds","global","statements","branches","lines","functions","excludes","each","rawCoverage","getFinalCoverage","globalResults","utils","summarizeCoverage","eachResults","summarizeFileCoverage","coverageFailed","check","name","actuals","actual","pct","actualUncovered","total","covered","threshold","console","error","keyThreshold"],"mappings":"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","file":"checkThreshold.js","sourcesContent":["import istanbul from '../utils/node!istanbul';\r\nimport minimatch from '../utils/node!minimatch';\r\n\r\nfunction mixin(destination/*, ...mixins*/) {\r\n    for (var i = 1; i < arguments.length; i++) {\r\n        var source = arguments[i];\r\n        for (var key in source) {\r\n            destination[key] = source[key];\r\n        }\r\n    }\r\n    return destination;\r\n}\r\n\r\nfunction overrideThresholds (key, overrides) {\r\n    var thresholds = {};\r\n\r\n    // First match wins\r\n    Object.keys(overrides).some(function (pattern) {\r\n        if (minimatch(normalize(key), pattern, {dot: true})) {\r\n            thresholds = overrides[pattern];\r\n            return true;\r\n        }\r\n    });\r\n\r\n    return thresholds;\r\n}\r\n\r\nfunction removeFiles (covObj, patterns) {\r\n    var obj = {};\r\n\r\n    Object.keys(covObj).forEach(function (key) {\r\n        // Do any patterns match the resolved key\r\n        var found = patterns.some(function (pattern) {\r\n            return minimatch(normalize(key), pattern, {dot: true});\r\n        });\r\n\r\n        // if no patterns match, keep the key\r\n        if (!found) {\r\n            obj[key] = covObj[key];\r\n        }\r\n    })\r\n\r\n    return obj;\r\n}\r\n\r\nexport default function checkThreshold(checkOpt, collector) {\r\n    var defaultThresholds = {\r\n\t\t\tglobal: {\r\n\t\t\t\tstatements: 0,\r\n\t\t\t\tbranches: 0,\r\n\t\t\t\tlines: 0,\r\n\t\t\t\tfunctions: 0,\r\n\t\t\t\texcludes: []\r\n\t\t\t},\r\n\t\t\teach: {\r\n\t\t\t\tstatements: 0,\r\n\t\t\t\tbranches: 0,\r\n\t\t\t\tlines: 0,\r\n\t\t\t\tfunctions: 0,\r\n\t\t\t\texcludes: [],\r\n\t\t\t\toverrides: {}\r\n\t\t\t}\r\n\t\t};\r\n\r\n    var thresholds = {\r\n        global: mixin(defaultThresholds.global, checkOpt.global),\r\n        each: mixin(defaultThresholds.each, checkOpt.each)\r\n    };\t\t\t\r\n\r\n    var rawCoverage = collector.getFinalCoverage();\r\n    var globalResults = istanbul.utils.summarizeCoverage(removeFiles(rawCoverage, thresholds.global.excludes));\r\n    var eachResults = removeFiles(rawCoverage, thresholds.each.excludes);\r\n\r\n    // Summarize per-file results and mutate original results.\r\n    Object.keys(eachResults).forEach(function (key) {\r\n        eachResults[key] = istanbul.utils.summarizeFileCoverage(eachResults[key]);\r\n    });\r\n\r\n    var coverageFailed = false;\r\n\r\n    function check (name, thresholds, actuals) {\r\n        var keys = [\r\n            'statements',\r\n            'branches',\r\n            'lines',\r\n            'functions'\r\n        ];\r\n\r\n        keys.forEach(function (key) {\r\n            var actual = actuals[key].pct;\r\n            var actualUncovered = actuals[key].total - actuals[key].covered;\r\n            var threshold = thresholds[key];\r\n\r\n            if (threshold < 0) {\r\n                if (threshold * -1 < actualUncovered) {\r\n                    coverageFailed = true;\r\n                    console.error('Uncovered count for ' + key + ' (' + actualUncovered + \t') exceeds ' + name + ' threshold (' + -1 * threshold + ')');\r\n                }\r\n            } else {\r\n                if (actual < threshold) {\r\n                    coverageFailed = true;\r\n                    console.error('Coverage for ' + key + ' (' + actual + '%) does not meet ' + name + ' threshold (' + threshold + '%)');\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    check('global', thresholds.global, globalResults);\r\n\r\n    Object.keys(eachResults).forEach(function (key) {\r\n        var keyThreshold = mixin(thresholds.each, overrideThresholds(key, thresholds.each.overrides));\r\n        check('per-file' + ' (' + key + ') ', keyThreshold, eachResults[key]);\r\n    })\r\n\r\n    return coverageFailed;\r\n}"]}