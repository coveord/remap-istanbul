{"version":3,"sources":["../src/writeReport.js"],"names":["writeReport","istanbulReportTypes","clover","cobertura","html","json","lcovonly","teamcity","text","collector","reportType","reportOptions","dest","sources","Promise","resolve","reject","SyntaxError","Reporter","require","options","Object","assign","file","dir","log","console","Error","sourceStore","reporter"],"mappings":";8BAAQ,gB;;;;;;oBA8BgBA,W;;;AA5BxB,MAAMC,sBAAsB;AAC3BC,WAAQ,MADmB;AAE3BC,cAAW,MAFgB;AAG3BC,SAAM,WAHqB;AAI3B,mBAAgB,MAJW;AAK3BC,SAAM,MALqB;AAM3BC,aAAU,MANiB;AAO3BC,aAAU,MAPiB;AAQ3B,gBAAa,SARc;AAS3B,mBAAgB,MATW;AAU3BC,SAAM;AAVqB,GAA5B;;AAaA;;;;;;;;;;;;;;;AAee,WAASR,WAAT,CAAqBS,SAArB,EAAgCC,UAAhC,EAA4CC,aAA5C,EAA2DC,IAA3D,EAAiEC,OAAjE,EAA0E;AACxF,UAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvC,QAAI,EAAEN,cAAcT,mBAAhB,CAAJ,EAA0C;AACzCe,YAAO,IAAIC,WAAJ,mCAAgDP,UAAhD,QAAP;AACA;AACA;AACD,QAAMQ,WAAWC,iCAA+BT,UAA/B,CAAjB;AACA,QAAMU,UAAUC,OAAOC,MAAP,CAAc,EAAd,EAAkBX,aAAlB,CAAhB;AACA,YAAQV,oBAAoBS,UAApB,CAAR;AACC,UAAK,MAAL;AACCU,cAAQG,IAAR,GAAeX,IAAf;AACA;AACD,UAAK,WAAL;AACCQ,cAAQI,GAAR,GAAcZ,IAAd;AACA;AACD,UAAK,SAAL;AACCQ,cAAQK,GAAR,GAAcb,QAAQc,QAAQD,GAA9B;AACA;AACD;AACC,YAAM,IAAIE,KAAJ,CAAU,uBAAV,CAAN;AAXF;AAaA,QAAId,OAAJ,EAAa;AACZO,aAAQQ,WAAR,GAAsBf,OAAtB;AACA;AACD,QAAMgB,WAAW,IAAIX,QAAJ,CAAaE,OAAb,CAAjB;AACAL,YAAQc,SAAS7B,WAAT,CAAqBS,SAArB,EAAgC,IAAhC,CAAR;AACA,IAzBM,CAAP;AA0BA","file":"writeReport.js","sourcesContent":["require('istanbul/index');\r\n\r\nconst istanbulReportTypes = {\r\n\tclover: 'file',\r\n\tcobertura: 'file',\r\n\thtml: 'directory',\r\n\t'json-summary': 'file',\r\n\tjson: 'file',\r\n\tlcovonly: 'file',\r\n\tteamcity: 'file',\r\n\t'text-lcov': 'console',\r\n\t'text-summary': 'file',\r\n\ttext: 'file',\r\n};\r\n\r\n/**\r\n * Generates an Instanbul Coverage report based on the information passed.\r\n * @param  {istanbul/lib/_collector} collector  An instance of an coverage\r\n *                                             collector\r\n * @param  {string}          reportType    The name of the report type to\r\n *                                         generate\r\n * @param  {object}       reportOptions The options to pass to the reporter\r\n * @param  {string|function} dest          The filename or outputting\r\n *                                         function to use for generating\r\n *                                         the report\r\n * @param  {istanbul/lib/store} sources?   A store of sources to be passed\r\n *                                         the reporter\r\n * @return {Promise}                       A promise that resolves when the\r\n *                                         report is complete.\r\n */\r\nexport default function writeReport(collector, reportType, reportOptions, dest, sources) {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tif (!(reportType in istanbulReportTypes)) {\r\n\t\t\treject(new SyntaxError(`Unrecognized report type of \"${reportType}\".`));\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst Reporter = require(`istanbul/lib/report/${reportType}`);\r\n\t\tconst options = Object.assign({}, reportOptions);\r\n\t\tswitch (istanbulReportTypes[reportType]) {\r\n\t\t\tcase 'file':\r\n\t\t\t\toptions.file = dest;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'directory':\r\n\t\t\t\toptions.dir = dest;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'console':\r\n\t\t\t\toptions.log = dest || console.log;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error('Unknown reporter type');\r\n\t\t}\r\n\t\tif (sources) {\r\n\t\t\toptions.sourceStore = sources;\r\n\t\t}\r\n\t\tconst reporter = new Reporter(options);\r\n\t\tresolve(reporter.writeReport(collector, true));\r\n\t});\r\n};\r\n"]}